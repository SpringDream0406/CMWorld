/**
 * addEventListener(eventName, handler): 이벤트 리스너를 등록합니다.
cuePlaylist(playlistId): 재생 목록을 준비하고 다음 재생을 기다립니다.
cueVideoById(videoId, startSeconds): 비디오 ID로 동영상을 준비하고 플레이어를 일시 중지 상태로 유지합니다.
cueVideoByUrl(mediaContentUrl, startSeconds): 비디오 URL로 동영상을 준비하고 플레이어를 일시 중지 상태로 유지합니다.
destroy(): 플레이어를 제거하고 메모리에서 삭제합니다.
getAvailablePlaybackRates(): 사용 가능한 재생 속도 목록을 가져옵니다.
getAvailableQualityLevels(): 사용 가능한 화질 수준 목록을 가져옵니다.
getCurrentTime(): 현재 재생 시간을 가져옵니다.
getDuration(): 동영상의 총 재생 시간을 가져옵니다.
getIframe(): 플레이어의 iframe 엘리먼트를 가져옵니다.
getOption(option): 지정된 옵션의 값을 가져옵니다.
getOptions(): 모든 옵션 값을 가져옵니다.
getPlaybackQuality(): 현재 재생 품질을 가져옵니다.
getPlaybackRate(): 현재 재생 속도를 가져옵니다.
getPlayerState(): 현재 플레이어의 상태를 가져옵니다.
getPlaylist(): 재생 목록의 비디오 ID 목록을 가져옵니다.
getPlaylistIndex(): 재생 목록에서 현재 비디오의 인덱스를 가져옵니다.
getVideoEmbedCode(): 동영상의 iframe 임베드 코드를 가져옵니다.
getVideoLoadedFraction(): 비디오의 로드된 부분의 비율을 가져옵니다.
getVideoUrl(): 동영상의 URL을 가져옵니다.
getVolume(): 현재 볼륨을 가져옵니다.
isMuted(): 플레이어가 음소거되었는지 여부를 확인합니다.
loadPlaylist(playlistId, index, startSeconds): 재생 목록을 로드하고 다음 재생을 기다립니다.
loadVideoById(videoId, startSeconds, suggestedQuality): 비디오 ID로 동영상을 로드하고 플레이어를 일시 중지 상태로 유지합니다.
loadVideoByUrl(mediaContentUrl, startSeconds, suggestedQuality): 비디오 URL로 동영상을 로드하고 플레이어를 일시 중지 상태로 유지합니다.
mute(): 플레이어를 음소거합니다.
nextVideo(): 다음 동영상으로 이동합니다.
off(eventName, handler): 이벤트 리스너를 제거합니다.
on(eventName, handler): 이벤트 리스너를 추가합니다.
pauseVideo(): 동영상을 일시 중지합니다.
playVideo(): 동영상을 재생합니다.
playVideoAt(index): 지정된 인덱스의 동영상을 재생합니다.
previousVideo(): 이전 동영상으로 이동합니다.
removeEventListener(eventName, handler): 이벤트 리스너를 제거합니다.
seekTo(seconds, allowSeekAhead): 동영상을 지정된 시간(초)으로 이동합니다.
setLoop(loopPlaylists): 재생 목록을 반복 재생할지 여부를 설정합니다.
setOption(option, value): 지정된 옵션의 값을 설정합니다.
setPlaybackQuality(suggestedQuality): 재생 품질을 설정합니다.
setPlaybackRate(suggestedRate): 재생 속도를 설정합니다.
setShuffle(shufflePlaylist): 재생 목록을 무작위로 재생할지 여부를 설정합니다.
setSize(width, height): 플레이어의 크기를 설정합니다.
setVolume(volume): 볼륨을 설정합니다.
stopVideo(): 동영상을 정지합니다.
 */


.current

container
: 
div
context
: 
{}
createPlayer
: 
() => {…}
destroyPlayer
: 
() => {…}
destroyPlayerPromise
: 
undefined
getInternalPlayer
: 
() => { return this.internalPlayer; }
internalPlayer
: 
{cueVideoById: ƒ, loadVideoById: ƒ, cueVideoByUrl: ƒ, loadVideoByUrl: ƒ, playVideo: ƒ, …}
onPlayerError
: 
event => {…}
onPlayerPlaybackQualityChange
: 
event => {…}
onPlayerPlaybackRateChange
: 
event => {…}
onPlayerReady
: 
event => {…}
onPlayerStateChange
: 
event => {…}
props
: 
{className: 'sideMusic-youtube', videoId: 'YjcU-0YEr54', opts: {…}, onPlay: ƒ, onEnd: ƒ, …}
refContainer
: 
container => { this.container = container; }
refs
: 
{}
resetPlayer
: 
() => this.destroyPlayer().then(this.createPlayer)
state
: 
null
updatePlayer
: 
() => {…}
updateVideo
: 
() => {…}
updater
: 
{isMounted: ƒ, enqueueSetState: ƒ, enqueueReplaceState: ƒ, enqueueForceUpdate: ƒ}
_reactInternalInstance
: 
{_processChildContext: ƒ}
_reactInternals
: 
FiberNode {tag: 1, key: null, stateNode: _YouTube, elementType: ƒ, type: ƒ, …}
isMounted
: 
(...)
replaceState
: 
(...)
[[Prototype]]
: 
Component